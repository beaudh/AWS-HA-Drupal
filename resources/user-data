#!/bin/bash -v

yum update -y aws-cfn-bootstrap 

# Helper function
function error_exit
{
 /opt/aws/bin/cfn-signal -e 1 -r "$1" ${CFN_WaitHandle}
 exit 1
}


# Do some basic setup through CFN
/opt/aws/bin/cfn-init -s ${CFN_StackId} \
  -r LaunchConfig1 \
  --region ${CFN_Region} || error_exit 'Failed to run cfn-init'

#
# Load params as an environment
#
[ -r /etc/cloud-env.sh ] && source /etc/cloud-env.sh

#==================================================
#
# From here down, the Parameters are available
#  as environment variables.
#
# Add build steps from here down ...
#
#==================================================

RPMS="httpd php php-mysql php-gd php-xml php-mbstring mysql gcc"
RPMS="$RPMS make libstdc++-devel gcc-c++ fuse fuse-devel"
RPMS="$RPMS libcurl-devel libxml2-devel openssl-devel mailcap git python-dateutil"
yum -y install $RPMS

#==================================================
#
# Logging to S3
#
#==================================================

# Enable system logging to s3
cat <<\syslogEOF > /etc/logrotate.d/syslog
/var/log/cron
/var/log/maillog
/var/log/messages
/var/log/secure
/var/log/spooler
/var/log/cloud-init
/var/log/cfn-init
/var/log/yum
{
  missingok
  notifempty
  sharedscripts
  dateext
  dateformat -%Y-%m-%d-%s
  postrotate
    source /etc/cloud-env.sh
    /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
    SYNC="aws s3 sync"
    LOG_URL="s3://${CFN_LogBucket}/${INSTANCE_ID}/var/log"
    TMPDIR=$( mktemp -d )
    cp /var/log/messages-* \
       /var/log/cron-* \
       /var/log/maillog-*  \
       /var/log/secure-* \
       /var/log/spooler-* \
       /var/log/yum-* \
       /var/log/cloud-init* \
       /var/log/cfn-init* ${TMPDIR}/
    ${SYNC} ${TMPDIR} ${LOG_URL}
    rm -rf ${TMPDIR}
  endscript
}
syslogEOF

# Enable apache logging to s3
cat <<\httpdEOF > /etc/logrotate.d/httpd
/var/log/httpd/*log 
{
  missingok
  notifempty
  sharedscripts
  dateext
  dateformat -%Y-%m-%d-%s
  postrotate
    source /etc/cloud-env.sh
    SYNC="aws s3 sync"
    LOG_URL="s3://${CFN_LogBucket}/${INSTANCE_ID}/var/log/httpd"
    TMPDIR=$( mktemp -d )
    cp /var/log/httpd/*_log-* ${TMPDIR}/
    ${SYNC} ${TMPDIR} ${LOG_URL}
    rm -rf ${TMPDIR}
    /sbin/service httpd reload > /dev/null 2>/dev/null || true
  endscript
}
httpdEOF

if [ -x /home/ec2-user/get_rds_logs.sh ]; then

  echo "* * * * * root /home/ec2-user/get_rds_logs.sh > /var/log/rds.log 2>&1" > /etc/cron.d/rds

# Enable apache logging to s3
cat <<\rdsEOF > /etc/logrotate.d/rds
/var/log/rds.log
{
  missingok
  notifempty
  sharedscripts
  dateext
  dateformat -%Y-%m-%d-%s
  postrotate
    source /etc/cloud-env.sh
    SYNC="aws s3 sync"
    LOG_URL="s3://${CFN_LogBucket}/${INSTANCE_ID}/var/log/rds"
    TMPDIR=$( mktemp -d )
    cp /var/log/rds.log ${TMPDIR}/
    ${SYNC} ${TMPDIR} ${LOG_URL}
    rm -rf ${TMPDIR}
  endscript
}
rdsEOF
fi

echo "* * * * * root /usr/sbin/logrotate -f /etc/logrotate.conf >/dev/null 2>&1" > /etc/cron.d/logrotate

#==================================================
#
# Setup CloudWatch logging
#
#==================================================

cat <<awslogsEOF > /etc/awslogs.conf
[general]
state_file= /var/awslogs/agent-state

[/var/log/httpd/access_log]
file = /var/log/httpd/access_log
log_group_name = ${CW_LogGroup}
log_stream_name = {instance_id}-httpd-access
datetime_format = %d/%b/%Y:%H:%M:%S

[/var/log/httpd/error_log]
file = /var/log/httpd/error_log
log_group_name = ${CW_LogGroup}
log_stream_name = {instance_id}-httpd-error
datetime_format = %d/%b/%Y:%H:%M:%S

[/var/log/messages]
file = /var/log/messages
log_group_name = ${CW_LogGroup}
log_stream_name = {instance_id}-messages
datetime_format = %b %d %H:%M:%S

[/var/log/secure]
file = /var/log/secure
log_group_name = ${CW_LogGroup}
log_stream_name = {instance_id}-secure
datetime_format = %b %d %H:%M:%S

awslogsEOF

yum -y install python-pip
pip install --upgrade awscli
aws logs create-log-stream \
  --region ${CFN_Region} \
  --log-group-name ${CW_LogGroup} \
  --log-stream-name ${INSTANCE_ID} || error_exit 'Failed to create log stream'

# Get the CloudWatch Logs agent
wget https://s3.amazonaws.com/aws-cloudwatch/downloads/awslogs-agent-setup-v1.0.py 
python awslogs-agent-setup-v1.0.py -n \
  -r ${CFN_Region} \
  -c /etc/awslogs.conf || error_exit 'Failed to run CloudWatch Logs agent setup'

#==================================================
#
# Setup s3fs and use for default/files dir
#
#==================================================

# Install s3fs
cd /home/ec2-user/s3fs/s3fs-1.61
./configure --prefix=/usr
make
make install

# Move the website files to the top level
mv /var/www/html/drupal-7.8/* /var/www/html
mv /var/www/html/drupal-7.8/.htaccess /var/www/html
rm -Rf /var/www/html/drupal-7.8

# Mount the S3 bucket
mv /var/www/html/sites/default/files /var/www/html/sites/default/files_original
mkdir -p /var/www/html/sites/default/files
s3fs -o allow_other -o use_cache=/tmp ${CFN_S3Bucket} /var/www/html/sites/default/files || error_exit 'Failed to mount the S3 bucket'

#==================================================
#
# Setup apache
#
#==================================================

# Make changes to Apache Web Server configuration
sed -i 's/AllowOverride None/AllowOverride All/g' /etc/httpd/conf/httpd.conf
if [ -x /home/ec2-user/append_rewriterule.sh ]; then
  /home/ec2-user/append_rewriterule.sh
fi
service httpd restart

#==================================================
#
# Setup Drupal
#
#==================================================

# Only execute the site install if we are the first host up - otherwise we'll end up losing all the data
echo `hostname` >> /var/www/html/sites/default/files/hosts
read first < /var/www/html/sites/default/files/hosts
if [ `hostname` = $first ]
then
  # Create the site in Drupal
  cd /var/www/html

  DB_URL=mysql://${DB_Username}:${DB_Password}@${DB_Hostname}:${DB_Port}/${DB_Name}

  ~ec2-user/drush/drush site-install standard \
     --yes \
     --site-name="${APP_SiteName}" \
     --site-mail="${APP_EMail}" \
     --account-name="${APP_SiteAdmin}" \
     --account-pass="${APP_SitePassword}" \
     --db-url=${DB_URL} \
     --db-prefix=drupal_

   # use the S3 bucket for shared file storage
   cp -R sites/default/files_original/* sites/default/files
   cp -R sites/default/files_original/.htaccess sites/default/files
fi

# Copy settings.php file since everything else is configured
cp /home/ec2-user/settings.php /var/www/html/sites/default
rm /home/ec2-user/settings.php
mysql -u ${DB_Username} -p${DB_Password} -h ${DB_Hostname} -D ${DB_Name} -e 'update drupal_block set status = 0 where delta = "login"'

# Start services
chkconfig httpd on    && service httpd restart 
chkconfig sendmail on && service sendmail restart 

#==================================================
#
# All is well so signal SUCCESS
#
#==================================================

/opt/aws/bin/cfn-signal -e 0 -r "Drupal setup complete" ${CFN_WaitHandle}
