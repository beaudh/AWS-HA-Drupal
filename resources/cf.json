{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template Drupal_Multi_AZ. Drupal is an open source content management platform powering millions of websites and applications. This template installs a highly-available, scalable Drupal deployment using a multi-az Amazon RDS database instance for storage. It uses the AWS CloudFormation bootstrap scripts to install packages and files at instance launch time. **WARNING** This template creates one or more Amazon EC2 instances, an Elastic Load Balancer and an Amazon RDS database. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {

    "KeyName": {
      "Description" : "HPAC EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "Label": {
      "Description" : "A label to distinguish this deployment from others",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "SiteName": {
      "Default": "HPAC Drupal",
      "Description" : "HPAC Drupal Web Site",
      "Type": "String"
    },

    "SiteEMail": {
      "Default": "unixadmin@harvard.edu",
      "Description" : "EMail for site adminitrator",
      "Type": "String"
    },

    "SiteAdmin": {
      "Default": "hpacadmin",
      "Description" : "The HPAC Drupal site admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "SitePassword": {
      "NoEcho": "true",
      "Description" : "The Drupal site admin account password",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBName": {
      "Default": "hpacdrupaldb",
      "Description" : "The Drupal database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername": {
      "Default": "hpacadmin",
      "NoEcho": "true",
      "Description" : "The Drupal database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "NoEcho": "true",
      "Description" : "The Drupal database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBClass" : {
      "Default" : "db.m1.small",
      "Description" : "Database instance class",
      "Type" : "String",
      "AllowedValues" : [ "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },

    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024Gb."
    },

    "MultiAZDatabase": {
      "Default": "true",
      "Description" : "Create a multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "WebServerCapacity": {
      "Default": "3",
      "Description" : "The initial number of WebServer instances",
      "Type": "Number",
      "MinValue": "2",
      "MaxValue": "5",
      "ConstraintDescription" : "must be between 1 and 5 EC2 instances."
    },

     "WebServerCapacitySingle": {
      "Default": "1",
      "Description" : "The initial number of WebServer instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "1",
      "ConstraintDescription" : "must be between 1 and 1 EC2 instances."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "128.103.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "S3LoggingRole" : {
      "Description" : "Role that allow S3 Logging",
      "Type" : "String",
      "Default" : "S3LoggingAccess",
      "ConstraintDescription" : "Must be a valid IAM Role"
    },

    "AlarmTopic" : {
      "Description" : "ARN of Topic to alarm to",
      "Type" : "String"
    }

  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro" : { "Arch" : "64" },
      "m1.small" : { "Arch" : "64" },
      "m1.medium" : { "Arch" : "64" },
      "m1.large" : { "Arch" : "64" },
      "m1.xlarge" : { "Arch" : "64" },
      "m2.xlarge" : { "Arch" : "64" },
      "m2.2xlarge" : { "Arch" : "64" },
      "m2.4xlarge" : { "Arch" : "64" },
      "m3.xlarge" : { "Arch" : "64" },
      "m3.2xlarge" : { "Arch" : "64" },
      "c1.medium" : { "Arch" : "64" },
      "c1.xlarge" : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64HVM" },
      "cc2.8xlarge" : { "Arch" : "64HVM" },
      "cg1.4xlarge" : { "Arch" : "64HVM" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1" : { "32" : "ami-178e927e", "64" : "ami-fb8e9292", "64HVM" : "ami-978d91fe" },
      "us-west-2" : { "32" : "ami-1e3a502e", "64" : "ami-043a5034", "64HVM" : "ami-383a5008" },
      "us-west-1" : { "32" : "ami-78ba833d", "64" : "ami-7aba833f", "64HVM" : "ami-5aba831f" }
    },

    "InstanceTypeMap" : {
      "db.m1.small" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadLatencyLimit" : "5", 
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      },
      "db.m1.large" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadLatencyLimit" : "5", 
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      },
      "db.m1.xlarge" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadLatencyLimit" : "5", 
        "ReadIOPSLimit" : "100",
        "WriteIOPSLimit" : "100"
      },
      "db.m2.xlarge" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "ReadLatencyLimit" : "5", 
        "WriteIOPSLimit" : "100"
      },
      "db.m2.2xlarge" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "ReadLatencyLimit" : "5", 
        "WriteIOPSLimit" : "100"
      },
      "db.m2.4xlarge" : {
        "CPULimit" : "60",
        "FreeStorageSpaceLimit" : "1024",
        "ReadIOPSLimit" : "100",
        "ReadLatencyLimit" : "5",        
        "WriteIOPSLimit" : "100"
      }
    }

  },

  "Resources" : {

    "InstanceProfile" : {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Path" : "/",
        "Roles" : [{"Ref" : "S3LoggingRole"}]
      }
    },

    "S3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain"
    },

    "BucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version" : "2008-10-17",
          "Id" : "UploadPolicy",
          "Statement" : [{
            "Sid" : "EnableReadWrite",
            "Action" : ["s3:GetObject", "s3:PutObject", "s3:PutObjectACL" ],
            "Effect" : "Allow",
            "Resource" : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "S3Bucket"} , "/*"]]},
            "Principal" : { "AWS": {"Fn::GetAtt" : ["S3User", "Arn"]} }
          }]
        },
        "Bucket" : {"Ref" : "S3Bucket"}
      }
    },

    "S3LogBucket" : {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain"
    },

    "LogBucketPolicy" : {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "PolicyDocument": {
          "Version" : "2008-10-17",
          "Id" : "UploadPolicy",
          "Statement" : [{
            "Sid" : "EnableWriteOnly",
            "Action" : ["s3:PutObject", "s3:PutObjectACL" ],
            "Effect" : "Allow",
            "Resource" : { "Fn::Join" : ["", ["arn:aws:s3:::", {"Ref" : "S3LogBucket"} , "/*"]]},
            "Principal" : { "AWS": {"Fn::GetAtt" : ["S3User", "Arn"]} }
          }]
        },
        "Bucket" : {"Ref" : "S3LogBucket"}
      }
    },

    "S3User" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect":"Allow",
            "Action":"s3:*",
            "Resource":"*"
          }]}
        }]
      }
    },

    "S3Keys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "S3User"}
      }
    },

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata" : {
        "Comment" : "Configure the Load Balancer with a simple health check and cookie-based stickiness"
      },
      "Properties" : {
        "AvailabilityZones" : [ "us-east-1a","us-east-1d" ],
        "LBCookieStickinessPolicy" : [ {
          "PolicyName" : "CookieBasedPolicy",
          "CookieExpirationPeriod" : "30"
        } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "5",
          "Interval" : "10",
          "Timeout" : "5"
        }
      }
    },

    "WebServerGroup1" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [ "us-east-1a","us-east-1d" ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig1" },
        "MinSize" : "1",
        "MaxSize" : "5",
        "DesiredCapacity" : { "Ref" : "WebServerCapacity" },
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
        "Tags" : [
          { "Key"  : "Label", "Value" : {"Ref" : "Label"}, "PropagateAtLaunch" : "true" },
          { "Key"  : "Name", "Value" : { "Fn::Join" : ["", [{"Ref" : "Label"} , " - ", "Web Instance"]]}, "PropagateAtLaunch" : "true"}
        ]
      }
    },

    "LaunchConfig1": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {

            "sources" : {
              "/var/www/html" : "http://ftp.drupal.org/files/projects/drupal-7.8.tar.gz",
              "/home/ec2-user" : "http://ftp.drupal.org/files/projects/drush-7.x-4.5.tar.gz",
              "/home/ec2-user/s3fs" : "http://s3fs.googlecode.com/files/s3fs-1.61.tar.gz"
            },

            "files" : {
              "/etc/passwd-s3fs" : {
                "content" : { "Fn::Join" : ["", [ { "Ref" : "S3Keys" }, ":", {"Fn::GetAtt": ["S3Keys", "SecretAccessKey"]}, "\n" ]]},
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },

              "/etc/cloud-env.sh" : {
                "content" : { "Fn::Join" : ["", [ 
                    "export CFN_WaitHandle='", { "Ref" : "WaitHandle" },   "'\n",
                    "export CFN_StackId='",    { "Ref" : "AWS::StackId" }, "'\n",
                    "export CFN_Region='",     { "Ref" : "AWS::Region" },  "'\n",
                    "export CFN_S3Bucket='",   { "Ref" : "S3Bucket" }, "'\n",
                    "export CFN_LogBucket='",  { "Ref" : "S3LogBucket" }, "'\n",
                    "export APP_SiteName='",   { "Ref" : "SiteName" }, "'\n",
                    "export APP_SiteAdmin='",  { "Ref" : "SiteAdmin" }, "'\n",
                    "export APP_SiteEmail='",  { "Ref" : "SiteEMail" }, "'\n",
                    "export APP_SitePassword='",  { "Ref" : "SitePassword" }, "'\n",
                    "export DB_Username='",    { "Ref" : "DBUsername" }, "'\n",
                    "export DB_Password='",    { "Ref" : "DBPassword" }, "'\n",
                    "export DB_Name='",        { "Ref" : "DBName" }, "'\n",
                    "export DB_Hostname='",    {"Fn::GetAtt" : ["MasterDB", "Endpoint.Address"]}, "'\n",
                    "export DB_Port='",        {"Fn::GetAtt" : ["MasterDB", "Endpoint.Port"]}, "'\n"
                  ]]},
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },

              "/home/ec2-user/append_rewriterule.sh" : {
                "content" : { "Fn::Join" : ["", [ 
                    "#!/bin/bash\n",
                    "sed -i '/RewriteEngine on/a RewriteRule ^(scripts|profile|includes|cron\\.php|install\\.php|update\\.php|xmlrpc\\.php|filter($|/)|user($|/)|admin($|/)) - [F,L]' /var/www/html/.htaccess\n"
                  ]]},
                "mode" : "000544",
                "owner" : "root",
                "group" : "root"
              },

              "/home/ec2-user/settings.php" : {
                "content" : { "Fn::Join" : ["", [
                  "<?php\n",
                  "\n",
                  "$databases = array (\n",
                  " 'default' =>\n",
                  " array (\n",
                  " 'default' =>\n",
                  " array (\n",
                  " 'database' => '", { "Ref" : "DBName" }, "',\n",
                  " 'username' => '", { "Ref" : "DBUsername" }, "',\n",
                  " 'password' => '", { "Ref" : "DBPassword" }, "',\n",
                  " 'host' => '", {"Fn::GetAtt" : ["MasterDB", "Endpoint.Address"]}, "',\n",
                  " 'port' => '", {"Fn::GetAtt" : ["MasterDB", "Endpoint.Port"]}, "',\n",
                  " 'driver' => 'mysql',\n",
                  " 'prefix' => 'drupal_',\n",
                  " ),\n",
                  " ),\n",
                  ");\n",
                  "\n",
                  "$update_free_access = FALSE;\n",
                  "\n",
                  "$drupal_hash_salt = '0c3R8noNALe3shsioQr5hK1dMHdwRfikLoSfqn0_xpA';\n",
                  "\n",
                  "ini_set('session.gc_probability', 1);\n",
                  "ini_set('session.gc_divisor', 100);\n",
                  "ini_set('session.gc_maxlifetime', 200000);\n",
                  "ini_set('session.cookie_lifetime', 2000000);\n"
                ]]},
                "mode" : "000444",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },

      "Properties": {
        "IamInstanceProfile" : {"Ref" : "InstanceProfile"},
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName" : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                  "#!/bin/bash -v\n",
          "export CFN_WaitHandle='", { "Ref" : "WaitHandle" }, "'\n",
          "export CFN_StackId=", { "Ref" : "AWS::StackId" }, "\n",  
          "export CFN_Region=",  { "Ref" : "AWS::Region" }, "\n",
          "# MORE INJECTED BELOW \n"   
         ]]}}
      }
    },

    "AdminServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [ "us-east-1a" ],
        "LaunchConfigurationName" : { "Ref" : "AdminLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "1",
        "DesiredCapacity" : { "Ref" : "WebServerCapacitySingle" },
        "Tags" : [ 
          { 
            "Key"  : "Name", 
            "Value" : { "Fn::Join" : ["", [{"Ref" : "Label"} , " - ", "Admin Instance"]]},
            "PropagateAtLaunch" : "true"
          }
        ]
      }
    },

    "AdminLaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "sources" : {
              "/var/www/html" : "http://ftp.drupal.org/files/projects/drupal-7.8.tar.gz",
              "/home/ec2-user" : "http://ftp.drupal.org/files/projects/drush-7.x-4.5.tar.gz",
              "/home/ec2-user/s3fs" : "http://s3fs.googlecode.com/files/s3fs-1.61.tar.gz"
            },

            "files" : {

              "/etc/cloud-env.sh" : {
                "content" : { "Fn::Join" : ["", [ 
                    "export CFN_WaitHandle='", { "Ref" : "WaitHandle" },   "'\n",
                    "export CFN_StackId=",    { "Ref" : "AWS::StackId" }, "\n",
                    "export CFN_Region=",     { "Ref" : "AWS::Region" },  "\n",
                    "export CFN_S3Bucket=",   { "Ref" : "S3Bucket" }, "\n",
                    "export CFN_LogBucket='", { "Ref" : "S3LogBucket" }, "'\n",
                    "export APP_SiteName=",   { "Ref" : "SiteName" }, "\n",
                    "export APP_SiteAdmin='", { "Ref" : "SiteAdmin" }, "'\n",
                    "export APP_SiteEmail=",  { "Ref" : "SiteEMail" }, "\n",
                    "export APP_SitePassword=",  { "Ref" : "SitePassword" }, "\n",
                    "export DB_Username=",    { "Ref" : "DBUsername" }, "\n",
                    "export DB_Password=",    { "Ref" : "DBPassword" }, "\n",
                    "export DB_Name=",        { "Ref" : "DBName" }, "\n",
                    "export DB_Hostname=",    {"Fn::GetAtt" : ["MasterDB", "Endpoint.Address"]}, "\n",
                    "export DB_Port=",        {"Fn::GetAtt" : ["MasterDB", "Endpoint.Port"]}, "\n"
                  ]]},
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },
                           
              "/etc/passwd-s3fs" : {
                "content" : { "Fn::Join" : ["", [ { "Ref" : "S3Keys" }, ":", {"Fn::GetAtt": ["S3Keys", "SecretAccessKey"]}, "\n" ]]},
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },

              "/home/ec2-user/settings.php" : {
                "content" : { "Fn::Join" : ["", [
                  "<?php\n",
                  "\n",
                  "$databases = array (\n",
                  " 'default' =>\n",
                  " array (\n",
                  " 'default' =>\n",
                  " array (\n",
                  " 'database' => '", { "Ref" : "DBName" }, "',\n",
                  " 'username' => '", { "Ref" : "DBUsername" }, "',\n",
                  " 'password' => '", { "Ref" : "DBPassword" }, "',\n",
                  " 'host' => '", {"Fn::GetAtt" : ["MasterDB", "Endpoint.Address"]}, "',\n",
                  " 'port' => '", {"Fn::GetAtt" : ["MasterDB", "Endpoint.Port"]}, "',\n",
                  " 'driver' => 'mysql',\n",
                  " 'prefix' => 'drupal_',\n",
                  " ),\n",
                  " ),\n",
                  ");\n",
                  "\n",
                  "$update_free_access = FALSE;\n",
                  "\n",
                  "$drupal_hash_salt = '0c3R8noNALe3shsioQr5hK1dMHdwRfikLoSfqn0_xpA';\n",
                  "\n",
                  "ini_set('session.gc_probability', 1);\n",
                  "ini_set('session.gc_divisor', 100);\n",
                  "ini_set('session.gc_maxlifetime', 200000);\n",
                  "ini_set('session.cookie_lifetime', 2000000);\n"
                ]]},
                "mode" : "000444",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },
      "Properties": {
        "IamInstanceProfile" : {"Ref" : "InstanceProfile"},
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType" : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName" : { "Ref" : "KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "export CFN_WaitHandle='", { "Ref" : "WaitHandle"   }, "'\n",
          "export CFN_StackId=",    { "Ref" : "AWS::StackId" }, "\n",  
          "export CFN_Region=",     { "Ref" : "AWS::Region"  }, "\n",
          "# MORE INJECTED BELOW \n"               
        ]]}}
      }
    },


    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebServerGroup1",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "3000"
      }
    },

   "MySQLDBParameterGroup" : {
       "Type": "AWS::RDS::DBParameterGroup",
       "Properties" : {
          "Description" : "MySQL DB Parameter Group",
          "Family" : "mysql5.6",
          "Parameters" : {
             "table_open_cache" : "64",
             "slow_query_log" : "1",
             "general_log" : "1",
             "log_output" : "FILE"
          },
          "Tags" : [
          { "Key"  : "Name", "Value" : { "Fn::Join" : ["", [{"Ref" : "Label"} , " - ", "MySQL DB Parameter Group"]]}}
          ]
       }
    },

    "MasterDB" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" : {
        "DBName" : { "Ref" : "DBName" },
        "AllocatedStorage" : { "Ref" : "DBAllocatedStorage" },
        "DBInstanceClass" : { "Ref" : "DBClass" },
        "Engine" : "MySQL",
        "EngineVersion" : "5.6",
        "DBInstanceIdentifier" : { "Fn::Join" : ["", [{"Ref" : "Label"} ,"MasterDatabase"]]},
        "DBParameterGroupName" : { "Ref": "MySQLDBParameterGroup" },
        "DBSecurityGroups": [ { "Ref": "DBSecurityGroup" }, { "Ref": "DBSecurityByCIDRIPGroup" } ],
        "MasterUsername" : { "Ref" : "DBUsername" },
        "MasterUserPassword" : { "Ref" : "DBPassword" },
        "MultiAZ" : { "Ref" : "MultiAZDatabase" },
        "Tags" : [
          { "Key"  : "Name", "Value" : { "Fn::Join" : ["", [{"Ref" : "Label"} , " - ", "Master Database"]]}}
        ]
      },
      "DeletionPolicy" : "Snapshot"
    },

    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "DBSecurityGroupIngress": { "EC2SecurityGroupName": { "Ref": "WebServerSecurityGroup"} },
        "GroupDescription" : "Frontend Access"
      }
    },

    "DBSecurityByCIDRIPGroup" : {
      "Type" : "AWS::RDS::DBSecurityGroup",
       "Properties" : {
         "GroupDescription" : "Ingress for CIDRIP",
         "DBSecurityGroupIngress" : { "CIDRIP" : "128.103.150.0/24" }
       }
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80, locked down to requests from the load balancer only and SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},"SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }
    },

    "ELBLatencyAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alert id ELB Latency over 1 sec on average for 5 minutes",
        "Namespace": "AWS/ELB",
        "MetricName": "Latency",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": "1",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ElasticLoadBalancer" }
        }]
      }
    },

    "ELB5XXAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alert on 5XX errors over 1 min",
        "Namespace": "AWS/ELB",
        "MetricName": "HTTPCode_ELB_5XX",
        "Statistic": "Sum",
        "Period": "60",
        "Threshold": "10",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "1",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ElasticLoadBalancer" }
        }]
      }
    },

    "ELB4XXAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Alert on 4XX errors over 1 min",
        "Namespace": "AWS/ELB",
        "MetricName": "HTTPCode_ELB_4XX",
        "Statistic": "Sum",
        "Period": "60",
        "Threshold": "10",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "1",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "LoadBalancerName",
            "Value": { "Ref": "ElasticLoadBalancer" }
        }]
      }
    },    


    "DBCPUHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " CPU > ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "CPULimit" ]}, "% for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "CPUUtilization",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "CPULimit" ]},
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MasterDB" }
        }]
      }
    },
    "DBFreeStorageSpaceAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " storage space <= ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "FreeStorageSpaceLimit" ]}, " for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "FreeStorageSpace",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "FreeStorageSpaceLimit" ]},
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MasterDB" }
        }]
      }
    },
    "DBReadIOPSHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " WriteIOPs > ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "ReadIOPSLimit" ]}, " for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "ReadIOPS",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "ReadIOPSLimit" ]},
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MasterDB" }
        }]
      }
    },
    "DBReadLatencyHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " WriteIOPs > ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "ReadIOPSLimit" ]}, " for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "ReadLatency",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "ReadLatencyLimit" ]},
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MasterDB" }
        }]
      }
    },

    "WriteIOPSHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join" : [ "", ["Alarm if ", { "Ref" : "DBName" }, " WriteIOPs > ", { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "WriteIOPSLimit" ]}, " for 5 minutes" ]]},
        "Namespace": "AWS/RDS",
        "MetricName": "WriteIOPS",
        "Statistic": "Average",
        "Period": "60",
        "Threshold": { "Fn::FindInMap" : [ "InstanceTypeMap", { "Ref" : "DBClass" }, "WriteIOPSLimit" ]},
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "5",
        "AlarmActions": [ { "Ref": "AlarmTopic" } ],
        "Dimensions": [{
            "Name": "DBInstanceIdentifier",
            "Value": { "Ref": "MasterDB" }
        }]
      }
    }


  },
  
  "Outputs" : {

    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]] },
      "Description" : "Drupal Website"
    },

    "MasterJDBCConnectionString": {
      "Description" : "JDBC connection string for the master database",
      "Value" : { "Fn::Join": [ "", [ "jdbc:mysql://",
                                      { "Fn::GetAtt": [ "MasterDB", "Endpoint.Address" ] },
                                      ":",
                                      { "Fn::GetAtt": [ "MasterDB", "Endpoint.Port" ] },
                                      "/",
                                      { "Ref": "DBName" }]]}
    },

    "MySQLConnectionString": {
      "Description" : "Connection string for the MySQL database",
        "Value" : { "Fn::Join": [ "", [ "mysql://",
                                      { "Fn::GetAtt": [ "MasterDB", "Endpoint.Address" ] },
                                      ":",
                                      { "Fn::GetAtt": [ "MasterDB", "Endpoint.Port" ] },
                                      "/",
                                      { "Ref": "DBName" }]]}
    },

    "LogBucket" : {
      "Value" : { "Ref" : "S3LogBucket" },
      "Description" : "Name of S3 bucket to hold website content"
    }

  }
}
